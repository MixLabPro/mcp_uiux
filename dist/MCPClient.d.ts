import { MCPProps } from './types';
export declare class MCPClient {
    url: string;
    private onToolsReady?;
    private onToolResult?;
    private onError?;
    private onResourcesReady?;
    private onResourceTemplatesReady?;
    private onPromptsReady?;
    private onReady?;
    private onNotifications?;
    private sessionId;
    private messageEndpoint;
    private eventSource;
    private reconnectAttempts;
    private maxReconnectAttempts;
    private reconnectTimeout;
    private reconnectTimer;
    private pendingCalls;
    private callIdCounter;
    serverName?: string | null;
    protocolVersion?: string | null;
    capabilities?: any;
    serverInfo?: any;
    constructor({ url, onToolsReady, onToolResult, onError, onResourcesReady, onResourceTemplatesReady, onPromptsReady, onReady, onNotifications }: MCPProps);
    private sendJsonRpcRequest;
    private handleError;
    executeTool(toolName: string, args: any): Promise<any>;
    connect(): Promise<void>;
    private initializeSession;
    private handleInitialized;
    private handleCallback;
    private processResourceTemplates;
    getToolsList(): Promise<any>;
    getResources(): Promise<any>;
    getResourceTemplates(): Promise<any>;
    expandUriByVariables(uri: string, variables: Record<string, string>): string;
    getTemplateVariables(template: any): string[];
    readResource(uri: string): Promise<any>;
    getPromptsList(): Promise<any>;
    getPrompt(name: string, args?: any): Promise<any>;
    reconnect(): void;
    disconnect(): void;
    transformToolsToOpenAIFunctions(tools?: any): any;
    getToolsOfOpenAIFunctions(tools?: any): Promise<any>;
}
export declare const prepareTools: (url: string, timeout?: number) => Promise<unknown>;
