import React from 'react';
interface MCPProps {
    url?: string;
    onToolsReady?: (tools: any[]) => void;
    onToolResult?: (content: any, isError: boolean) => void;
    onError?: (error: Error) => void;
    onResourcesReady?: (resources: any[]) => void;
    onResourceTemplatesReady?: (resourceTemplates: any[]) => void;
    onPromptsReady?: (prompts: any[]) => void;
    onReady?: (data: any) => void;
}
export declare class MCPClient {
    url: string;
    private onToolsReady?;
    private onToolResult?;
    private onError?;
    private onResourcesReady?;
    private onResourceTemplatesReady?;
    private onPromptsReady?;
    private onReady?;
    private sessionId;
    private messageEndpoint;
    private eventSource;
    private reconnectAttempts;
    private maxReconnectAttempts;
    private reconnectTimeout;
    private reconnectTimer;
    private pendingCalls;
    private callIdCounter;
    serverName?: string | null;
    protocolVersion?: string | null;
    capabilities?: any;
    constructor({ url, onToolsReady, onToolResult, onError, onResourcesReady, onResourceTemplatesReady, onPromptsReady, onReady }: MCPProps);
    private sendJsonRpcRequest;
    executeTool(toolName: string, args: any): Promise<any>;
    connect(): Promise<void>;
    private initializeSession;
    private handleInitialized;
    private callback;
    getToolsList(): Promise<any>;
    getResources(): Promise<any>;
    getResourceTemplates(): Promise<any>;
    expandUriByVariables(uri: string, variables: Record<string, string>): string;
    getTemplateVariables(template: any): string[];
    readResource(uri: string): Promise<any>;
    getPromptsList(): Promise<any>;
    getPrompt(name: string, args?: any): Promise<any>;
    reconnect(): void;
    disconnect(): void;
}
export declare const useMCP: ({ url, onToolsReady, onToolResult, onError, onReady }?: MCPProps) => {
    mcpClient: MCPClient | null;
    loading: boolean;
    error: string | null;
    tools: any[];
    resources: any[];
    resourceTemplates: any[];
    prompts: any[];
    connect: (sseUrl: string, resourceFilter: string) => Promise<void>;
    executeTool: (toolName: string, args: any) => Promise<any>;
    reconnect: () => void;
    getResources: () => Promise<any>;
    readResource: (uri: string) => Promise<any>;
    getToolsList: () => Promise<any>;
    getPromptsList: () => Promise<any>;
    getPrompt: (name: string, args?: any) => Promise<any>;
    getResourceTemplates: () => Promise<any>;
    expandUriByVariables: (template: string, variables: Record<string, string>) => string | undefined;
    getTemplateVariables: (template: any) => string[];
};
export declare const MCP: React.FC<MCPProps>;
export {};
